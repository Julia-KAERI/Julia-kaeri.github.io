---
title: "소개"

number-sections: true
number-depth: 3
crossref:
  chapters: false
---

{{< include ../../../latexmacros.qmd >}}

</br>

## 시작하기 {#sec-pytorch_introduction}

앞으로의 모든 코드에는 아래의 `import` 가 이미 실행되었다고 가정한다.

```python
import torch
from torch import nn
from torch.utils.data import Dataset, DataLoader
from torchvision import datasets
from torchvision.transforms import ToTensor
import numpy as np
import matplotlib.pyplot as plt
```

</br>

### 데이터셋(Dataset) 과 데이터 로더(Data Loader) {#sec-pytorch_dataset_and_dataloader}

파이토치에서 데이터에 작업을 할 때 `torch.utils.data.DataLoader` 와 `torch.utils.data.Dataset` 을 사용한다. `Dataset` 샘플과 정답을 저장하는 컨테이너이며 `DataLoader` 는 `Dataset` 의 데이터들을 iterable 하게 처리 할 수 있도록 한다. [Pytorch 의 Datasets](https://pytorch.org/vision/stable/datasets.html) 은 pytorch 에서 제공하는 데이터셋을 설명한다.

`FashionMNIST` 데이터셋을 다운로드 받아 보자. 이 `FashionMNIST` 데이터셋은 가방이나 악세사리와 같은 패션 아이템의 이미지를 학습하기 위한 저해상도 이미지의 모음이다. 우선 학습 데이터를 다운받는다.

```{.python filename="In"}
training_data = datasets.FashionMNIST(
    root="/home/asc/torchdata",
    train=True,
    download=True,
    transform=ToTensor(),
)
```

`root` 는 데이터를 다운 받는 디렉토리를 말한다. `root` 디렉토리에 `FashionMNIST` 서브디렉토리를 만들고 이 서브디렉토리에 데이터가 저장된다.

이제 테스트 데이터를 다운받아보자.

```{.python filename="In"}
test_data = datasets.FashionMNIST(
    root="/home/asc/torchdata",
    train=False,
    download=True,
    transform=ToTensor(),
)
```

데이터를 확인해보자.

```{.python filename="In"}
training_data
```
```{.txt filename="Out"}
Dataset FashionMNIST
    Number of datapoints: 60000
    Root location: /home/asc/torchdata
    Split: Train
    StandardTransform
Transform: ToTensor()
```
</br>

```{.python filename="In"}
test_data
```
```{.txt filename="Out"}
Dataset FashionMNIST
    Number of datapoints: 10000
    Root location: /home/ast/torchdata
    Split: Test
    StandardTransform
Transform: ToTensor()
```

`training_data` 와 `test_data` 는 텐서화된 이미지 데이터를 포함한다.

```{.python filename="In"}
training_data.data
```

```{.txt filename="Out"}
tensor([[[0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0],
         ...,
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0]],

        [[0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0],
         [0, 0, 0,  ..., 0, 0, 0],
         ...,
```

</br>


배치 사이즈를 정하고 데이터 로더를 생성한다. 

```{.python filename="In"}
batch_size = 64

# 데이터로더를 생성합니다.
train_dataloader = DataLoader(training_data, batch_size=batch_size)
test_dataloader = DataLoader(test_data, batch_size=batch_size)

for X, y in test_dataloader:
    print(f"Shape of X [N, C, H, W]: {X.shape}")
    print(f"Shape of y: {y.shape} {y.dtype}")
    break
```

```{.txt filename="Out"}
Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28])
Shape of y: torch.Size([64]) torch.int64
```

</br>

이제 `FashionMNIST` 의 몇몇 아이템들을 보자.
</br>

```{.python filename="In"}
labels_map = {
    0: "T-Shirt",
    1: "Trouser",
    2: "Pullover",
    3: "Dress",
    4: "Coat",
    5: "Sandal",
    6: "Shirt",
    7: "Sneaker",
    8: "Bag",
    9: "Ankle Boot",
}
figure = plt.figure(figsize=(8, 8))
cols, rows = 3, 3
for i in range(1, cols * rows + 1):
    sample_idx = torch.randint(len(training_data), size=(1,)).item()
    img, label = training_data[sample_idx]
    figure.add_subplot(rows, cols, i)
    plt.title(labels_map[label])
    plt.axis("off")
    plt.imshow(img.squeeze(), cmap="gray")
plt.show()
```

![Out](https://tutorials.pytorch.kr/_images/sphx_glr_data_tutorial_001.png){#fig-FashonMNIST width=500}

</br>

### 사용자 정의 데이터셋과 데이터 로더 {#sec-pytorch_custom_dataset_and_dataloader}

사용자 정의 `Dataset` 은 클래스 `Dataset` 클래스를 상속받아 만들며 아래의 세 함수가 정의되어야 한다.

- `__init__`
- `__len__`
- `__getitem__`

즉 python 의 list 와 유사하게 행동해야 한다는 의미이다. [Pytorch tutorial 의 사용자 정의 Dataset](https://pytorch.org/tutorials/beginner/basics/data_tutorial.html#creating-a-custom-dataset-for-your-files) 에서 제시한 샘플 코드는 아래와 같다.

```python
import os
import pandas as pd
from torchvision.io import read_image

class CustomImageDataset(Dataset):
    def __init__(self, annotations_file, img_dir, transform=None, target_transform=None):
        self.img_labels = pd.read_csv(annotations_file)
        self.img_dir = img_dir
        self.transform = transform
        self.target_transform = target_transform

    def __len__(self):
        return len(self.img_labels)

    def __getitem__(self, idx):
        img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, 0])
        image = read_image(img_path)
        label = self.img_labels.iloc[idx, 1]
        if self.transform:
            image = self.transform(image)
        if self.target_transform:
            label = self.target_transform(label)
        return image, label
```
</br>

이제 아주 간단한 Dataset 을 만들어 보자.

```{.python filename="In"}
from torch.utils.data import Dataset

class SimpleCustomDataset(Dataset):
    def __init__(self, data:str):
        self.data = data
        
    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        return self.data[idx]

ds = SimpleCustomDataset("abcdefghijk")
dloader = DataLoader(ds, batch_size=3, shuffle=True)
```

이제 `ds` 라는 Dataset 과 `dloader` 라는 DataLoader 가 만들어졌다. 아래와 같이 `batch_size` 크기 대로 순회 할 수 있다.

```{.python filename="In"}
for i in range(4):
    print(next(iter(dloader)))
```
```{.txt filename="Out"}
['d', 'i', 'g']
['f', 'd', 'c']
['e', 'h', 'c']
['h', 'c', 'a']
```


</br>

### CUDA {#sec-pytorch_cuda_check}

`torch.cuda.is_available()` 함수를 통해 CUDA 를 사용 할 수 있는지 확인 할 수 있다.

```{.python filename="In"}
torch.cuda.is_available()
```

```{.txt filename="Out"}
True
```
</br>

CUDA GPU 가 몇개인지 확인할 수 있다.

```{.python filename="In"}
torch.cuda.device_count()
```

```{.txt filename="Out"}
2
```

CUDA 장치는 `0` 부터 시작하는 인덱스를 갖는다. 따라서 2개의 CUDA GPU 장치의 인덱스는 `0`, `1` 이며 그 이름은 다음과 같이 확인 할 수 있다.

```{.python filename="In"}
for i in (0, 1):
    print(torch.cuda.get_device_name(i))
```
```{.txt filename="Out"}
NVIDIA RTX A5000
NVIDIA RTX A5000
```

</br>

CUDA 를 사용하기 위해서는 다음과 host 즉 CPU 상에서 텐서를 만든 후 CUDA 로 텐서를 복사할 수 있다.

```{.python filename="In"}
a=torch.tensor([[1,2,3,4], [5,6,7,8]])
print("a.divice = ", a.device)
b = a.to(cuda0)
c = a.to(cuda1)
print("b.divice = ", b.device)
print("c.divice = ", c.device)
b
```
```{.txt filename="Out"}
a.divice =  cpu
b.divice =  cuda:0
c.divice =  cuda:1
tensor([[1, 2, 3, 4],
        [5, 6, 7, 8]], device='cuda:0')
```

</br>

혹은 처음부터 CUDA 장치에 텐서를 만들 수 있다.

```{.python filename="In"}
d=torch.tensor([[1,2], [3,4]], device="cuda:0")
```

</br>

## 텐서

`numpy.array` 와 같이 `torch.tensor` 는 pytorch 에서 데이터를 다루는데 사용되는 객체이다. 많은 경우 `numpy` (혹은 `np`) 를 `torch`, `array` 를 `tensor` 로 바꾸면 numpy 와 거의 같게 동작한다. [pytorch-for-numpy-users](https://github.com/wkentaro/pytorch-for-numpy-users) 를 참고하라.

numpy 의 array 는 cpu 에서 동작하지만 torch 의 tensor 는 cpu 에서 동작할 수도 있고 cuda 에서 동작할 수도 있다. 
