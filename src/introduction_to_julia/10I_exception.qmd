# Interude : 예외 처리 {.unnumbered}

예를 들어 길이가 3인 일차원 벡터의 네번째 성분에 접근할 경우, julia 인터프리터는 `BoundsError` 를 발생시키고 실행을 종료한다.

```txt
In [1]: aa=[1,2,3];println(aa[4]);println("End")
ERROR: BoundsError: attempt to access 3-element Vector{Int64} at index [4]
Stacktrace:
```

이렇게 줄리아 코드가 실행중일 때 실행을 지속시키지 못할 중대한 조건이 발생할 경우 에러가 발생는데, 에러에 대해 적합한 처리를 수행하여 프로그램을 계속 진행시킬 수도 있고, julia 인터프리터가 발생시키지 못하는 에러를 직접적으로 발생시킬 수도 있다. 이런 것들을 예외 처리(Exception handling) 이라고 한다. Julia 에서 기본적으로 제공하는 에러는 기본 매뉴얼의 [Built-in Exceptions](https://docs.julialang.org/en/v1/manual/control-flow/#Built-in-Exceptions) 에 나와 있다.


| 에러 | 설명 |
|:-----:|:----------------------------|
| `ArgumentError(msg)` | 함수에 유효하지 않은 인자가 입력된경우 |
| `BoundsError
## 일변수 다항식의 Julia 구현 

