---
title: "TCP/UDP 통신"

number-sections: true
number-depth: 2
crossref:
  chapters: false
---

## 소켓 통신

현재의 많은 장비들은 소켓 통신을 사용하여 데이터와 정보를 주고받는다. 예전의 장비들은 RS232 나 RS485 같은 직렬 통신이나 다른 다양한 통신 방법을 사용하는 경우가 많았지만 최근의 장비들은 소켓 통신을 통해 데이터를 전송하는 경우가 많다. 여기서는 소켓 통신에 대해 짧게 알아보고 실제 구현해 보기로 하자.

</br>

### 소켓

소켓은 같은 컴퓨터의 프로세스 사이에서, 혹은 서로 다른 컴퓨터(혹은 장비)의 프로세스 사이에서 통신을 수행할 때의 종단점 (end point)이다. 같은 컴퓨터의 프로세스 사이의 소켓에는 [unix domain socket](https://en.wikipedia.org/wiki/Unix_domain_socket) 이 있으며 다른 컴퓨터 프로세스 사이에서의 통신에는 Datagram socket 과 Streaming socket 이 있다. 각각의 네트워크 하드웨어는 사양과 내부 명령어가 다르지만 운영체제 수준에서 이를 추상화하여 서로 통신할 수 있도록 한 것이 소켓이다. 여기서는 서로 다른 컴퓨터의 프로세스간 통신에 대해서만 다루기로 한다.

</br>

### 스트림 소켓

전화와 같이 믿을 수 있는 양방향 통신을 제공한다. 즉 데이터를 주고받는 소켓의 양쪽이 성립된 상태에서 한쪽(서버)에서 다른 한쪽(클라이언트)으로의 연결을 초기화하고, 연결이 생성된 후에는 어느 쪽에서든 다른 쪽으로 통신할 수 있다. 데이터를 송신하고 나서 이 데이터가 실제로 도착했는지도 즉각 확인할 수 있다. 보통 전송 제어 프로토콜(Transmission Control Protocol, TCP)이라 불리는 표준 통신 프로토콜을 사용하며 이 외에도 SCTP(Stream Control Transmission Protocol) 나 DCCP (Datagram Congestion Control Protocol) 가 사용되지만 여기서는 다루지 않기로 한다. 컴퓨터 네트워크에서 데이터는 보통 패킷이라는 단위로 전송되는데, TCP는 패킷이 오류 없이 순서대로 도착하도록 설계되었다. 웹서버, 메일서버, 각 클라이언트 애플리케이션 모두는 TCP와 스트림 소켓을 사용한다.

</br>

### 데이터그램 소켓 

데이터그램 소켓의 연결은 단방향이고 신뢰할 수 없다. IP 와 포트번호를 특정하여 보내지만 수신을 확인하지 않는다. 또한 데이터가 순서대로 전송된다고 보장할 수도 없다. 사용자 데이터그램 프로토콜(User Datagram Protocol, UDP)이라는 표준 프로토콜을 사용한다. TCP 에 비해 단순하고 간단하며 부하가 적고 빠른 방법이다. 패킷 손실이 허용되기도 하며 네트워크 게임이나 음악/동영상 스트리밍에서 자주 쓰인다. UDP 를 통해 신뢰성 있는 데이터 통신을 하고 싶다면 직접 패킷을 통해 구현해야 한다.



</br>

### 서버와 클라이언트

여기서는 접속을 기다리는 것이 서버(server), 기다리는 서버에 접근하는 것이 클라이언트(client) 라고 한다.

</br>

## TCP 와 UDP 를 이용한 간단한 에코 서버와 클라이언트의 저차원 구현

여기서는 Python 으로 간단한 서버와 클라이언트를 구현한다. 가장 기본적인 저차원 구현은 C 언어를 이용한 구현이지만 여기서는 이 C 구현과 가장 비슷하며 저차원 구현을 체험해 볼 수 있는 Python 구현을 통해 TCP 와 UDP 통신을 알아보기로 하자. 



### TCP 통신

서버가 대기하고 클라이언트와의 접속이 성립하면 클라이언트는 사용자로부터의 입력을 서버에게 보낸다. 서버는 클라이언트로부터 받은 메시지를 출력하고 그 메시지 끝에 `#` 을 붙여 클라이언트에게 보낸다. 클라이언트는 `#` 이 붙은 메시지를 받고 출력한다. 사용자로부터 `-1` 을 받으면 서버는 역시 `#` 이 붙은 메시지 `-1#` 을 클리이언트로 보내고 종료하며, 클라이언트 역시 종료한다.


Python 으로 구현하지만 여기서의 방식은 소켓 통신의 기본적인 즉 low-level 방식으로 거의 모든 언어에서 기본적으로 지원한다. 물론 실제로는 이 방식보다는 이 방식을 좀 더 쓰기 편하게 만든 방식을 쓸 수도 있지만 기본 동작을 일단 확인하기 위해 low-level 방식으로 구현해보자.

소켓 통신을 위해서는 `socket` 모듈을 임포트 해야 하고 소켓 객체를 구현해야 한다. 서버에는 두개의 소켓이 필요하다. 하나는 접속을 받아들이고 연결을 위한 역할을 수행하는 소켓(이하 **연결 소켓**)이며 다른 하나는 클라이언트와 데이터를 주고받기 위한 소캣(이하 **서버 소켓**)이다. 클라이언트는 데이터를 주고받는 소켓(이하 **클라이언트 소켓**) 하나만 있으면 된다. 연결 소켓, 서버소켓, 클라이언트 소켓은 편의상 지은 이름이며 다른 곳에서는 다른 이름으로 사용될 수 있다. 


#### TCP 서버


일단 서버쪽에서 연결 소켓을 성립시켜야 한다. 연결 소켓을 위해서는 서버 IP 와 포트 번호가 필요하다. IP 는 `"123.123.123.12"` 형식의 문자열이며 포트 번호는 0 부터 65535 번까지의 정수이다. IP 와 포트번호는 [Internet Assigned Numbers Authority (IANA)](http://www.iana.org) 에서 관리하는데 포트 번호중의 일부는 특별한 용도로 지정되어 있다. 자세한 것은 [List of TCP and UDP port numbers](https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers) 를 참고하라. 보통 49152 에서 65535 번호는 자유롭게 사용 할 수 있다.

</br>

연결 소켓은 IP 와 포트번호, 그리고 프로토콜로 구성된다. 우선 

```python
import socket
```

을 통해 소캣 모듈을 사용할 수 있도록 한다. 이후 아래와 같이 소켓 인스턴스를 만들고 프로토콜과 옵션을 정한다.

```python
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
```

`socket.socket` 의 첫번째 인자로는 다음이 사용될 수 있다.

- `socket.AF_INET` 은 IPv4 즉 4 개의 8비트 정수로 지정된 IP 번호를 사용한는 것을 의미한다. 보퉁 많이 사용하는 `123.123.123.12` 형식이다. 

- `socket.AF_INET6` 는 IPv6 주소체계를 사용한다는 것을 의미하며 16비트 정수 4개를 사용한다. 

- `socket.AF_UNIX` 는 네트웍 통신이 아닌 프로세스간의 통신에 대해 사용한다.


`socket.socket` 의 두번째 인자로는 다음이 사용될 수 있다.

- `socket.SOCK_STREAM` 은 TCP 통신 규약을 사용한다는 것을 의미한다.

- `socket.SOCK_DGRAM` 은 UDP 통신 규약을 사용한다는 것을 의미한다.

</br>
 
`socket.setsockopt` 함수는 소켓의 옵션을 지정한다. 첫번째 인자는 프로토콜 레벨이며 두번째 인자는 프로토콜 레벨에서의 옵션 이름, 세번째 인자부터는 앞의 두 인자에 따른 설정값 등이 온다. 자세한 내용은 [setsockopt 서브루틴](https://www.ibm.com/docs/ko/aix/7.3?topic=s-setsockopt-subroutine) 을 참고하라. 여기서 `socket.SO_REUSEADDR` 옵션의 옵션값을 `1` 로 설정하면 클라이언트 소켓을 닫은 후 같은 IP 와 포트번호로 연결할 수 있다.

</br>

```python
server_socket.bind((host, port))
server_socket.listen(0)
client_soc, addr = server_socket.accept()
```

`bind((host, port))` 는 연결 소켓에 IP 번호(`host`) 와 포트(`port`) 를 지정한다. 이제 `listen()` 을 통해 클라이언트로부터 접속 요청 대기를 시작한다. `listen` 함수는 최대 대기 큐의 갯수를 인자로 받을 수 있며, 인자가 없을 경우 자동으로 할당된다.

`accept()` 함수는 연결을 시도한 클라이언트와 통신 할 수 있는 소켓(`client_soc`), 즉 서버 소켓과 연결된 클라이언트의 `(IP 주소, 포트)` 튜플을 반환한다. 이 서버 소켓을 통해 클라이언트와 통신한다. 이제 서버의 코드를 보자.


```python
# TCP 서버 프로그램 
import socket, time

host, port = 'localhost', 43333
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server_socket.bind((host, port))
server_socket.listen()

print('TCP 서버 시작')

client_soc, addr = server_socket.accept()

print('연결된 client (IP, port):', addr)

# 접속 유지 변수
connection_retained = True

while connection_retained :
    try:
        data = client_soc.recv(1024)
    except ConnectionResetError:
        print('ConnectionResetError')
        connection_retained = False
    finally:    
        msg = data.decode() # 읽은 데이터 디코딩
        print('받은 메시지 :', msg)
        client_soc.sendall((msg+"#").encode(encoding='utf-8')) # 에코메세지 클라이언트로 보냄

        # 클라이언트로부터 받은 메시지가 "-1" 이면 접속을 종료시킨다.
        if msg == "-1":
            connection_retained = False
            print("to be closed")        
            client_soc.close()
        
    time.sleep(0.2)
    
server_socket.close() # 사용했던 서버 소켓을 닫아줌 
```

앞서 말했듯이 클라이언트로부터 `-1` 메시지를 받기 전까지는 계속 클라이언트와 통신해야 한다. 이를 위해 일단 `connection_retianed = True` 로 두고 이 변수값이 `True` 인 상황에서는 계속 주고 받도록 한다. 그러나 클라이언트로부터 `-1` 을 받으면 `connection_refused = False` 가 되며 `while` 루프를 벗어나고 소켓이 종료되고 (`server_socket.close()`) 프로그램도 종료한다.  

</br>

#### TCP 클라이언트

클라이언트는 서버보다 간단한다.

```python
import socket
server_ip, server_port = 'localhost', 43333
socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
```

서버에 접속하기 위해서는 서버의 IP 와 포트 번호를 알야야 한다(`server_ip`, `server_port`). TCP 통신이므로 소켓은 server 의 연결소켓과 같이 설정한다. 이제 연결을 시도한다

```python
socket.connect((server_ip, server_port))
```

서버와 마찬가지로 연결 유지를 확인하기 위한 변수 `connetion_retained` 가 존재한다. 코드는 아래와 같다.

```python
# TCP 클라이언트 프로그램
import socket, time

server_ip, server_port = 'localhost', 43333
socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socket.connect((server_ip, server_port))
socket.settimeout(0.1)

# 연결 유지 변수
connection_retained = True

while connection_retained :
    msg = input('msg:') # 서버로 보낼 msg 입력
    
    if msg == "-1":
        connection_retained = False
    socket.sendall(msg.encode(encoding='utf-8'))

    # 서버가 에코로 되돌려 보낸 메시지를 클라이언트가 받음
    try:
        data = socket.recv(1024)
    except TimeoutError:
        print('TimeoutError')
    finally:
        msg = data.decode() # 읽은 데이터 디코딩
        print('서버로부터 받은 메시지 :', msg)
socket.close()
```

`socket.recv(1024)` 는 서버로부터 최대 `1024` 바이트를 는다는 의미이다. 그러나 이 함수 실행 후 지정된 시간동안 응답이 없을 경우 `TimeoutError` 가 발생하며 소캣이 종료된다. 응답대기시간은 `socket.settimeout()` 함수를 통해 지정하며 인자로 초 단위의 시간을 입력한다. 인자가 없으면 무한정 기다린다.

여기서는 응답 대기 시간이 길더라도 문제가 없지만 예를 들어 여러 서버로부터 데이터를 받는 경우를 생각해보자. 여기서 응답을 대기한다면 다른 작업을 수행 할 수가 없으며, 이를 위해 응답 대기시간을 짧게 잡고 다른 작업을 수행한 후 다시 메시지를 기다리는 것이 좋다.

</br>

### UDP 통신

UDP 통신과 TCP 통신의 차이는 다음과 같다.

- 소켓 타입이 `socket.SOCK_STREAM` 이 아닌 `socket.SOCK_DGRAM` 이다.

- 연결 소켓이 없으며 서버소켓이 직접 `bind` 된다. 

- TCP 에서는 `recv`, `send` 를 통해 데이터를 주고받지만 UDP 에서는 `recvfrom`, `sendto` 함수를 사용한다. 앞서 사용한 `sendall` 함수는 기본 함수인 `send` 를 python socket 모듈에서 확장한 것이다. 

- `recvfrom` 함수를 통해 데이터와 데이터를 보낸 주소를 얻으며, 이 주소가 원하는 주소가 않을 경우 무시한다.

- `sendto` 함수의 인자로는 데이터와 데이터를 받을 IP, 포트번호의 튜플을 전달한다. 

</br>

소스코드를 보라.  

</br>

#### UDP 서버

```python
# UDP 서버 프로그램
import socket, time

host, port = 'localhost', 43333
server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
server_socket.bind((host, port))
# server_socket.listen()

print('UDP 서버 시작')

#client_soc, addr = server_socket.accept()
addr = (None, None)

print('연결된 client (IP, port):', addr)

# 접속 유지 변수
connection_retained = True

while connection_retained :
    try:
        data, addr = server_socket.recvfrom(1024)
    except ConnectionResetError:
        print('ConnectionResetError')
        connection_retained = False
    finally:    
        msg = data.decode() # 읽은 데이터 디코딩
        print(addr, '받은 메시지 :', msg)
        server_socket.sendto((msg+"#").encode(encoding='utf-8'), addr) # 에코메세지 클라이언트로 보냄

        # 클라이언트로부터 받은 메시지가 "-1" 이면 접속을 종료시킨다.
        if msg == "-1":
            connection_retained = False
            print("to be closed")        
            # client_soc.close()
        
    time.sleep(0.2)
    
server_socket.close() # 사용했던 서버 소켓을 닫아줌 
```

</br>

#### UDP 클라이언트

```python
# UDP 클라이언트 프로그램
import socket, time

server_addr = ('localhost', 43333)
socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
# socket.connect((server_ip, server_port))
socket.settimeout(0.1)

# 연결 유지 변수
connection_retained = True

while connection_retained :
    msg = input('msg:') # 서버로 보낼 msg 입력
    
    if msg == "-1":
        connection_retained = False
    socket.sendto(msg.encode(encoding='utf-8'),server_addr)

    # 서버가 에코로 되돌려 보낸 메시지를 클라이언트가 받음
    try:
        data, addr = socket.recvfrom(1024)
    except TimeoutError:
        print('TimeoutError')
    finally:
        msg = data.decode() # 읽은 데이터 디코딩
        print('서버로부터 받은 메시지 :', msg)
socket.close()
```



